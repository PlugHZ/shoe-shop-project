import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from './AuthContext'; // üëà 1. Import "Auth" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

const CartContext = createContext();
export const useCart = () => useContext(CartContext);

// (‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ URL ‡∏Ç‡∏≠‡∏á Backend ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏ß‡πâ)
const API_URL = 'http://localhost:3001/api/cart';

export const CartProvider = ({ children }) => {
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false); // (‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î)
  const { user } = useAuth(); // üëà 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏°‡∏µ user.id ‡πÅ‡∏•‡πâ‡∏ß [previous step])

  // --- 3. (‡πÉ‡∏´‡∏°‡πà!) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏à‡∏≤‡∏Å DB ---
  const fetchCart = async () => {
    // (‡πÅ‡∏Å‡πâ!) ‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏ß‡πà‡∏≤‡∏°‡∏µ user.id (‡∏à‡∏≤‡∏Å MySQL [previous step])
    if (!user || !user.id) { 
      setCartItems([]); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ user ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ id, ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
      return;
    }

    setLoading(true);
    try {
      // (‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ user.id ‡∏à‡∏≤‡∏Å AuthContext ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2) [previous step]
      const response = await fetch(`${API_URL}/user/${user.id}`); 
      
      if (!response.ok) {
        throw new Error('Failed to fetch cart');
      }

      const data = await response.json();
      
      // (‡πÅ‡∏Å‡πâ!) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ data ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏à‡∏£‡∏¥‡∏á‡πÜ
      if (Array.isArray(data)) {
        // (‡πÅ‡∏Å‡πâ!) ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô image_urls (‡∏à‡∏≤‡∏Å DB) ‡πÄ‡∏õ‡πá‡∏ô images (‡∏ó‡∏µ‡πà ProductCard ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á)
        const mappedData = data.map(item => ({
          ...item,
          images: item.image_urls // üëà ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        }));
        setCartItems(mappedData);
      } else {
        setCartItems([]); // ‡∏ñ‡πâ‡∏≤ API ‡∏û‡∏±‡∏á, ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á
      }

    } catch (error) {
      console.error("Failed to fetch cart:", error);
      setCartItems([]); // ‡∏ñ‡πâ‡∏≤ Error ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á
    } finally {
      setLoading(false);
    }
  };

  // --- 4. (‡πÉ‡∏´‡∏°‡πà!) ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà "user" ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô) ---
  useEffect(() => {
    fetchCart();
  }, [user]);

  // --- 5. (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î!) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô addToCart ---
  const addToCart = async (product, quantity, size) => {
    if (!user || !user.id) { // (‡πÅ‡∏Å‡πâ!) ‡πÄ‡∏ä‡πá‡∏Ñ user.id
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö');
      return Promise.reject("User not logged in"); // (‡πÅ‡∏Å‡πâ!) ‡∏™‡πà‡∏á Reject ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    }

    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API (POST) ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô Backend
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: user.id, // ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (‡∏à‡∏≤‡∏Å MySQL)
          product_id: product.id,
          quantity: quantity,
          size: size,
        }),
      });

      if (!response.ok) {
        const errData = await response.json();
        throw new Error(errData.error || 'Failed to add item to cart');
      }
      
      // (‡πÅ‡∏Å‡πâ!) ‡πÉ‡∏´‡πâ return fetchCart() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ProductDetail "await" (‡∏£‡∏≠) ‡πÑ‡∏î‡πâ
      return fetchCart(); 

    } catch (error) {
      console.error(error);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${error.message}`);
      return Promise.reject(error); // (‡πÅ‡∏Å‡πâ!) ‡∏™‡πà‡∏á Reject ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    }
  };

  // --- 6. (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î!) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô removeFromCart ---
  // (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ "itemId" (ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô cart_items) ‡πÅ‡∏ó‡∏ô product.id+size)
  const removeFromCart = async (cartItemId) => {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API (DELETE) ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô Backend
      const response = await fetch(`${API_URL}/${cartItemId}`, { method: 'DELETE' });
      if (!response.ok) throw new Error('Failed to remove item');
      await fetchCart();
    } catch (error) {
      console.error(error);
    }
  };

  // --- 7. (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î!) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô updateQuantity ---
  const updateQuantity = async (cartItemId, newQuantity) => {
    const quantity = Math.max(1, parseInt(newQuantity) || 1);
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API (PUT) ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô Backend
      const response = await fetch(`${API_URL}/${cartItemId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity: quantity }),
      });
      if (!response.ok) throw new Error('Failed to update quantity');
      await fetchCart();
    } catch (error) {
      console.error(error);
    }
  };

  // --- 8. (‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î!) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì cartTotal ---
  const cartTotal = cartItems.reduce((total, item) => (total + (item.price * item.quantity)), 0);

  // ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ
  const value = { 
    cartItems, 
    addToCart, 
    removeFromCart, 
    updateQuantity, 
    cartTotal,
    loadingCart: loading, // (‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ loading ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢)
    fetchCart
  };

  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;
};